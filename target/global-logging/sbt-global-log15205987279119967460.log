[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\abadanov\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\abadanov\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Eclipse Foundation Java 11.0.12)
[debug]       Load.loadUnit: plugins took 74.6346ms
[debug]       Load.loadUnit: defsScala took 0.2281ms
[debug] [Loading] Scanning directory C:\Users\abadanov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\abadanov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.739 ms
[debug]           Load.resolveProject(global-plugins) took 44.2681ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\abadanov\.sbt\1.0\plugins, plugins: List(<none>))) took 87.2504ms
[debug] [Loading] Done in C:\Users\abadanov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 105.935ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2771ms
[debug]     Load.loadUnit(file:/C:/Users/abadanov/.sbt/1.0/plugins/, ...) took 188.531ms
[debug]   Load.apply: load took 352.5094ms
[debug]   Load.apply: resolveProjects took 6.4954ms
[debug]   Load.apply: finalTransforms took 47.4993ms
[debug]   Load.apply: config.delegates took 5.8876ms
[debug]   Load.apply: Def.make(settings)... took 439.2848ms
[debug]   Load.apply: structureIndex took 138.9723ms
[debug]   Load.apply: mkStreams took 3.6576ms
[info] loading global plugins from C:\Users\abadanov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2500.5622ms
[debug]           Load.loadUnit: plugins took 15.4379ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\abadanov\IdeaProjects\BankProject\project
[debug]             Load.loadUnit: mkEval took 6.2805ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\abadanov\IdeaProjects\BankProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9253 ms
[info] loading settings for project bankproject-build from idea.sbt ...
[debug]               Load.resolveProject(bankproject-build) took 5.7971ms
[debug]             Load.loadTransitive: finalizeProject(Project(id bankproject-build, base: C:\Users\abadanov\IdeaProjects\BankProject\project, plugins: List(<none>))) took 8.3725ms
[debug] [Loading] Done in C:\Users\abadanov\IdeaProjects\BankProject\project, returning: (bankproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1901.0949ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.6732ms
[debug]         Load.loadUnit(file:/C:/Users/abadanov/IdeaProjects/BankProject/project/, ...) took 1921.0738ms
[debug]       Load.apply: load took 1922.8079ms
[debug]       Load.apply: resolveProjects took 0.2412ms
[debug]       Load.apply: finalTransforms took 11.7767ms
[debug]       Load.apply: config.delegates took 0.4587ms
[debug]       Load.apply: Def.make(settings)... took 79.3476ms
[debug]       Load.apply: structureIndex took 24.7092ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\abadanov\IdeaProjects\BankProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3930.0005ms
[debug]     Load.loadUnit: defsScala took 0.0038ms
[debug] [Loading] Scanning directory C:\Users\abadanov\IdeaProjects\BankProject
[debug]       Load.loadUnit: mkEval took 0.285ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\abadanov\IdeaProjects\BankProject, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.716 ms
[info] loading settings for project bankproject from build.sbt ...
[debug]         Load.resolveProject(bankproject) took 24.1639ms
[debug]       Load.loadTransitive: finalizeProject(Project(id bankproject, base: C:\Users\abadanov\IdeaProjects\BankProject, plugins: List(<none>))) took 27.0135ms
[debug] [Loading] Done in C:\Users\abadanov\IdeaProjects\BankProject, returning: (bankproject)
[debug]     Load.loadUnit: loadedProjectsRaw took 1519.2594ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.6885ms
[debug]   Load.loadUnit(file:/C:/Users/abadanov/IdeaProjects/BankProject/, ...) took 5456.5877ms
[debug] Load.apply: load took 5458.1864ms
[debug] Load.apply: resolveProjects took 0.0948ms
[debug] Load.apply: finalTransforms took 22.4816ms
[debug] Load.apply: config.delegates took 0.3269ms
[debug] Load.apply: Def.make(settings)... took 57.1697ms
[debug] Load.apply: structureIndex took 19.9055ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to BankProject (in build file:/C:/Users/abadanov/IdeaProjects/BankProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62562 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62562, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to BankProject (in build file:/C:/Users/abadanov/IdeaProjects/BankProject/)
[debug] > Exec(idea-shell, None, None)
